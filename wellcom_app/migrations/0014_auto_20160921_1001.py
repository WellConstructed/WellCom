# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-09-21 14:01
from __future__ import unicode_literals

from django.db import migrations, models


well_data = [["id","name","latitude","longitude","country","date_installed","last_update","estimated_users","cost_usd","contractor","flow_rate_lpm","depth_m"],
[1,"Zorko Alindoone Gambrogo ",10.891111,-0.925556,"Ghana","2016-03-17","2016-03-17 00:00:00-04",0,0,"unknown",170,40],
[2,"Katanga",10.822222,-0.790278,"Ghana","2016-04-15","2016-04-15 00:00:00-04",0,0,"unknown",86,40],
[3,"Kogadoone",10.793056,-0.928889,"Ghana","2015-11-09","2015-11-09 00:00:00-05",0,0,"unknown",0,40],
[4,"Sumbrungo-Yipaala",10.811667,-0.930278,"Ghana","2016-03-18","2016-03-18 00:00:00-04",0,0,"unknown",170,40],
[5,"Atolisum Primary School-Anateem",10.825,-0.959167,"Ghana","2016-09-20","2016-09-20 00:00:00-04",0,0,"unknown",0,40],
[6,"Akukuni-Bongo",10.886111,-0.812222,"Ghana","2016-09-20","2016-09-20 00:00:00-04",0,0,"unknown",0,40],
[7,"Zuboko-Bongo",10.905556,-0.806944,"Ghana","2016-03-17","2016-03-17 00:00:00-04",0,0,"unknown",130,45]]


well_test_data = [["id","date","pH","turbidity_ntu","app_true_colour_hz","conductivity_uscm","temperature_c","total_iron","calcium","magnesium","chloride","sulphate","suspended_solids","total_dissolved_solids","total_solids","total_alkalinity","total_hardness","calcium_hardness","magnesium_hardness","copper","nitrite_nitrogen","nitrate_nitrogen","fluoride","mpn_index_tc_per_deciliter","ammonia_nitrogen","manganese","aluminum","well_id"],
                  [1,"2016-03-08",7.1,0.99,6,443,33,0.07,56,85,19,15,19,222,241,54,490,140,350,0.18,0.009,0.3,0.04,0,0.32,0.061,0.018,1],
                  [2,"2016-05-09",7,1.88,8,338,34,0.07,48,4.3,21,24,14,169,183,66,138,120,18,0.42,0.046,4.9,0.92,0,0.5,0.37,0.173,2],
                  [3,"2016-03-14",6.9,9.81,11,146,29,0.24,7.2,5.3,9,5,35,72,107,22,40,18,22,0.27,0.025,3.2,1.3,0,0.31,0.059,0.269,4],
                  [4,"2015-11-09",7,3.92,6,413,31,0.13,80,104,13,3,12,206,218,96,630,200,430,0.18,0.088,2,0.27,0,0.17,0.02,0.172,3],
                  [5,"2016-03-09",6.9,0.71,5,359,33,0.01,40,7.7,24,5,3,180,183,28,132,100,32,0.11,0.003,1.7,1.5,0,0.07,0.011,0.347,7]]


def add_real_well_data(apps, schema_editor):
    Well = apps.get_model("wellcom_app", "Well")
    for i in range(1, len(well_data)):
        well = {}
        for j in range(len(well_data[0])):
            well[well_data[0][j]] = well_data[i][j]

        well_id = well["id"]
        name = well["name"]
        latitude = well["latitude"]
        longitude = well["longitude"]
        country = well["country"]
        date_installed = well["date_installed"]
        last_update = well["last_update"]
        estimated_users = well["estimated_users"]
        cost_usd = well["cost_usd"]
        contractor = well["contractor"]
        flow_rate_lpm = well["flow_rate_lpm"]
        depth_m = well["depth_m"]

        well_obj = Well(id=well_id, name=well["name"],
                        latitude=well["latitude"],
                        longitude=well["longitude"],
                        country=well["country"],
                        date_installed=well["date_installed"],
                        last_update=well["last_update"],
                        estimated_users=well["estimated_users"],
                        cost_usd=well["cost_usd"],
                        contractor=well["contractor"],
                        flow_rate_lpm=well["flow_rate_lpm"],
                        depth_m=well["depth_m"])
        well_obj.save()

def add_well_test_data(apps, schema_editor):
    WellTest = apps.get_model("wellcom_app", "WaterTest")
    for i in range(1, len(well_test_data)):
        test = {}
        for j in range(len(well_test_data[0])):
            test[well_test_data[0][j]] = well_test_data[i][j]
        well_test = WellTest(
                     id=test["id"], date=test["date"], pH=test["pH"],
                     turbidity_ntu=test["turbidity_ntu"],
                     app_true_colour_hz=test["app_true_colour_hz"],
                     conductivity_uscm=test["conductivity_uscm"],
                     temperature_c=test["temperature_c"],
                     total_iron=test["total_iron"],
                     calcium=test["calcium"],
                     magnesium=test["magnesium"],
                     chloride=test["chloride"],
                     sulphate=test["sulphate"],
                     suspended_solids=test["suspended_solids"],
                     total_dissolved_solids=test["total_dissolved_solids"],
                     total_solids=test["total_solids"],
                     total_alkalinity=test["total_alkalinity"],
                     total_hardness=test["total_hardness"],
                     calcium_hardness=test["calcium_hardness"],
                     magnesium_hardness=test["magnesium_hardness"],
                     copper=test["copper"],
                     nitrite_nitrogen=test["nitrite_nitrogen"],
                     nitrate_nitrogen=test["nitrate_nitrogen"],
                     fluoride=test["fluoride"],
                     mpn_index_tc_per_deciliter=test[
                                                "mpn_index_tc_per_deciliter"],
                     ammonia_nitrogen=test["ammonia_nitrogen"],
                     manganese=test["manganese"],
                     aluminum=test["aluminum"],
                     well_id=test["well_id"])
        well_test.save()


class Migration(migrations.Migration):

    dependencies = [
        ('wellcom_app', '0013_auto_20160920_1624'),
    ]

    operations = [
        migrations.RunPython(add_real_well_data, add_well_test_data)
    ]
